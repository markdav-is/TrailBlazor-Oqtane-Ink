@namespace MarkDav.Module.Lottie
@using System.ComponentModel
@inherits ModuleBase

@inject ISettingService SettingService
@implements IDisposable 

@if (PageState.EditMode)
{
    <h2>@ModuleState.Title</h2>
}
else if (_url == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="text-center">
                    <p>
                        <dotlottie-wc src="@_url" autoplay loop></dotlottie-wc>
                    </p>
                </div>
            </div>
        </div>
    </div>
}
 


@code {

    private string _url;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            _url = SettingService.GetSetting(settings, "LottieURL", "https://lottie.host/4db68bbd-31f6-4cd8-84eb-189de081159a/IGmMCqhzpt.lottie");

            ((INotifyPropertyChanged)SiteState.Properties).PropertyChanged += HandlePropertyChanged;

        }
        catch (Exception ex)
        {
            AddModuleMessage(ex.Message, MessageType.Error);
        }

    }

    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName=="Lottie")
        {
            _url = SiteState.Properties["Lottie"];
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ((INotifyPropertyChanged)SiteState.Properties).PropertyChanged -= HandlePropertyChanged;
    }

}